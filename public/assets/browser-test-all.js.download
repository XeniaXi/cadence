/* eslint-disable */
/** @namespace */
var BrowserTest = window.BrowserTest || {};
window.BrowserTest = BrowserTest;
var ifs = window.ifs || {};

// TODO(cmartin): Remove dead code.
BrowserTest.definitions = function (config) {
    // Translate new preferences.
    // TODO(cmartin): AXIS not needed.
    function translatePrefs(preflist, keyarray) {
        var prefarray = preflist.split(',');
        var newprefs;
        if (prefarray.length > 0) {
            newprefs = [];
            var n = 0;
            for (var i = 0; i < prefarray.length; i++) {
                var item = prefarray[i];
                var key;
                var version;
                function keySplit(k) {
                    k = k.trim();
                    var val = [];
                    var tmp = k.split(' ');
                    val[0] = tmp.length > 1 ? tmp[0] : tmp;
                    val[1] = tmp.length > 1 ? tmp[1] : '';
                    return val;
                }
                //if (item.indexOf('|') == -1) {
                var kv = keySplit(item);
                key = kv[0];
                version = kv[1];
                /*} else {
                    var items = keySplit(item)[1].split('|');
					key = keySplit(item)[0];
					// we have to splice this.
					version = item[1];
				}*/
                for (var t = 0; t < keyarray.length; t++) {
                    try {
                        if (key == keyarray[t][2]) {
                            var newitem = keyarray[t][0];
                            if (version != '') newitem += '|' + version;
                            newprefs[n] = newitem;
                            n++;
                        }
                    } catch (e) {
                        console.log(e);
                    }
                }
            }
        }
        return newprefs;
    }

    function toBoolean(string) {
        return string == 'false' ? false : true;
    }

    BrowserTest.translatePrefs = translatePrefs;

    // Define the various Operating Systems.
    // Syntax: [useragent string (all lowercase), display string, key]
    BrowserTest.os_types = [
        ['x11', 'UNIX', 'UNX'],
        ['linux', 'LINUX', 'LNX'],
        ['mac', 'Mac', 'MAC'],
        ['win', 'Windows', 'WIN'],
    ];

    BrowserTest.mac_types = [
        ['os x', 'Mac OS X', 'OSX'],
        ['ppc', 'Mac PPC', 'PPC'],
        ['mac_powerpc', 'Mac PPC', 'PPC'],
        ['68k', 'Mac 68K', '68K'],
    ];

    BrowserTest.win_types = [
        ['nt 10.0', 'Windows 10', '10'],
        ['nt 6.3', 'Windows 8.1', '8.1'],
        ['nt 6.2', 'Windows 8', '8'],
        ['nt 6.1', 'Windows 7', '7'],
        ['nt 6.0', 'Windows Vista', 'Vista'],
        ['nt 5.2', 'Windows Server 2003', 'Server 2003'],
        ['nt 5.1-', 'Windows XP2', 'XP'],
        ['sv1', 'Windows XP', 'XP'],
        ['nt 5.1', 'Windows XP', 'XP'],
        ['nt 5.01', 'Windows 20001', '2000'],
        ['nt 5.0', 'Windows 2000', '2000'],
        ['nt 4.0', 'Windows NT', 'NT'],
        ['9x', 'Windows ME', 'ME'],
        ['98', 'Windows 98', '98'],
        ['95', 'Windows 95', '95'],
        ['ce', 'Windows CE', 'CE'],
    ];

    // Define the various Browsers.
    // Syntax: [useragent string (all lowercase), display string, key].
    // Note: edge before chrome before safari
    BrowserTest.browser_types = [
        ['konqueror', 'Konqueror', 'KR'],
        ['omniweb', 'Omniweb', 'OW'],
        ['opera', 'Opera', 'OA'],
        ['webtv', 'WebTV', 'WT'],
        ['aol', 'Aol', 'AL'],
        ['edg', 'Edge', 'ED'],
        ['chrome', 'Chrome ', 'CH'],
        ['safari', 'Safari ', 'SF'],
        ['firefox', 'Firefox', 'FF'],
        ['msie', 'Internet Explorer', 'IE'],
    ];

    // Define defaults.
    // Javascript can only ever be true, as you need it to see the results of the test.
    BrowserTest.browser_required = toBoolean(
        ifs.env.i18nStrings.browCompat.browser_required.toLowerCase(),
    );
    BrowserTest.os_required = toBoolean(
        (ifs.env.i18nStrings.browCompat.os_required || 'false').toLowerCase(),
    );
    BrowserTest.cookies_required = toBoolean(
        ifs.env.i18nStrings.browCompat.cookies_requires.toLowerCase(),
    );
    BrowserTest.min_ssl_size = parseInt(
        ifs.env.i18nStrings.browCompat.ssl_key_size || 128,
        0,
    );
    BrowserTest.ssl_required = toBoolean(
        ifs.env.i18nStrings.browCompat.ssl_key_size_required.toLowerCase(),
    );
    BrowserTest.ssl_key_size = ifs.env.i18nStrings.browCompat.ssl_key_size;
    BrowserTest.screen_required = toBoolean(
        ifs.env.i18nStrings.browCompat.screen_required.toLowerCase(),
    );
    BrowserTest.min_width = parseInt(
        ifs.env.i18nStrings.browCompat.screen_width || 0,
        0,
    );
    BrowserTest.min_height = parseInt(
        ifs.env.i18nStrings.browCompat.screen_height || 0,
        0,
    );
    BrowserTest.adobe_required = toBoolean(
        ifs.env.i18nStrings.browCompat.adobe_required.toLowerCase(),
    );
    BrowserTest.popups_required = toBoolean(
        ifs.env.i18nStrings.browCompat.popups_required.toLowerCase(),
    );
    BrowserTest.min_adobe_version = 6;
    BrowserTest.true_text = ifs.env.i18nStrings.browCompat.test_successful;
    BrowserTest.false_text = ifs.env.i18nStrings.browCompat.browser_test_fail;
    BrowserTest.installed_text = 'TEXT INSTALLED';
    BrowserTest.not_installed_text = 'TEXT NOTINSTALLED';
    BrowserTest.version_text = 'TEXT VERSION';
    BrowserTest.mozilla_compatible = 'TEXT MOZILLACOMPATIBLE';
    BrowserTest.unknown_browser = 'TEXT UNKNOWN';
    BrowserTest.unknown_os = 'TEXT UNKNOWN';
    BrowserTest.unknown_screen_res = 'TEXT UNKNOWN';
    BrowserTest.message_display = 'success';

    // Define preferred matrix.
    // Syntax: [os, [os variant[, os variant]], [browser|version[, browser|version]], cookies, screen width,
    // screen height, acrobat]
    // NOTE: Javascript is assumed to always be true, as you need it to see these results.
    // A list of various ua strings can be found here: http://www.zytrax.com/tech/web/browser_ids.htm
    BrowserTest.os_variants = BrowserTest.mac_types.concat(
        BrowserTest.win_types,
    );
    ifs.env.i18nStrings.browCompat.browsers = ifs.env.i18nStrings.browCompat
        .browsers
        ? ifs.env.i18nStrings.browCompat.browsers
        : 'IE 8, FF, SF 6, CH, ED';

    BrowserTest.supported_browsers = translatePrefs(
        ifs.env.i18nStrings.browCompat.browsers,
        BrowserTest.browser_types,
    );
    // Current spec calls for one browser list, no os config.
    BrowserTest.pref_matrix = [
        [
            'all',
            BrowserTest.os_variants,
            BrowserTest.supported_browsers,
            '',
            '',
            '',
            '',
        ],
    ];
};

/** @namespace */
var BrowserTest = BrowserTest || {};

/**
 * Determines if the information gathered from the browser is "preferred" according to DI standards.
 */
BrowserTest.prefs = (function () {
    /**
     * Remove any spaces found in the value.
     * @param {string} value
     * @returns {string}
     */
    function stripSpaces(value) {
        var newvalue = '';

        for (var i = 0; i < value.length; i++) {
            var c = value.charAt(i);
            if (c != ' ') {
                newvalue += c;
            }
        }

        return newvalue;
    }

    /**
     * Determine if value is completely numeric.
     * @param {string} value
     * @returns {boolean}
     */
    function isNumeric(value) {
        var usevalue = stripSpaces(value);
        var numset = /[0-9]/;

        for (var i = 0; i < usevalue.length; i++) {
            var c = usevalue.charAt(i);
            if (!numset.test(c)) {
                return false;
            }
        }

        return true;
    }

    /**
     * Check browser version, only compare the first two version digits, and ignore the rest if any
     * e.g. 4.6.2 - only 4.6 will be checked.
     * @param {string} browser_version
     * @param {string} matrix_version
     * @returns {boolean} True if browser version is greater than or equal to required version.
     */
    function checkVersion(browser_version, matrix_version) {
        BrowserTest.min_vers;
        // TODO(cmartin): error handling for non-numeric.
        var browser_version_builds = browser_version.split('.');
        var matrix_version_builds = matrix_version.split('.');

        // Compare only the first 2 build digits, e.g. for 4.6 and 4.6.1.4
        var br_2_build_digits;
        if (browser_version_builds.length == 1) {
            br_2_build_digits = browser_version;
        } else if (browser_version_builds.length >= 2) {
            br_2_build_digits =
                browser_version_builds[0] + '.' + browser_version_builds[1];
        }

        var ma_2_build_digits;
        if (matrix_version_builds.length == 1) {
            ma_2_build_digits = matrix_version;
        } else if (matrix_version_builds.length >= 2) {
            ma_2_build_digits =
                matrix_version_builds[0] + '.' + matrix_version_builds[1];
        }

        // Compare versions as numbers, e.g. 4.6 >= 5.
        if (Number(br_2_build_digits) >= Number(ma_2_build_digits)) {
            return true;
        } else {
            BrowserTest.min_vers = ma_2_build_digits;
        }

        return false;
    }

    return {
        /**
         * Initialize prefs in preparation for performing browser checks.
         * @public
         */
        init: function () {
            // If there are no preferences, allow everything to be "okay"
            if (
                !BrowserTest.pref_matrix ||
                BrowserTest.pref_matrix.length == 0
            ) {
                BrowserTest.os_okay = true;
                BrowserTest.browser_okay = true;
                BrowserTest.cookies_okay = true;
                BrowserTest.javascript_okay = true;
                BrowserTest.ssl_okay = true;
                BrowserTest.screen_res_okay = true;
                BrowserTest.adobe_okay = true;
            } else {
                var all_matrix_browsers = '';

                // Go through the matrix and check if user has preferred items.
                var matrix_id = -1;
                for (var i = 0; i < BrowserTest.pref_matrix.length; i++) {
                    // Check os preference.
                    var matrix_os = BrowserTest.pref_matrix[i][0];
                    var matrix_os_variant_list = BrowserTest.pref_matrix[i][1];

                    // Grab all browsers listed in matrix.
                    all_matrix_browsers += BrowserTest.pref_matrix[i][2];
                    if (i < BrowserTest.pref_matrix.length - 1)
                        all_matrix_browsers += ',';

                    // OS found.
                    if (BrowserTest.os_type == matrix_os) {
                        // Check for os variant.
                        for (
                            var o = 0;
                            o < matrix_os_variant_list.length;
                            o++
                        ) {
                            var os_variant_item = matrix_os_variant_list[o];

                            if (
                                os_variant == '' ||
                                os_variant_item == os_variant
                            ) {
                                BrowserTest.os_okay = true;
                                matrix_id = i;
                                break;
                            }
                        }
                    }
                }

                // If the preferred os doesn't matter, whatever is found is good.
                if (!BrowserTest.os_required) BrowserTest.os_okay = true;

                // Is this a preferred browser? if not required continue on.
                if (!BrowserTest.browser_required) {
                    BrowserTest.browser_okay = true;
                } else {
                    // OS isn't known, use all listed browsers in matrix.
                    if (matrix_id == -1) {
                        var matrix_browser_list = all_matrix_browsers.split(
                            ',',
                        );
                    } else {
                        var matrix_browser_list =
                            BrowserTest.pref_matrix[matrix_id][2];
                    }
                    for (var b = 0; b < matrix_browser_list.length; b++) {
                        var browser_item = matrix_browser_list[b];

                        // If no version is specified, give it a dummy value
                        if (browser_item.indexOf('|') == -1) {
                            browser_item += '|na';
                        } else if (
                            browser_item.indexOf('|') ==
                            browser_item.length - 1
                        ) {
                            browser_item += 'na';
                        }

                        var browser_items = browser_item.split('|');

                        var matrix_browser = browser_items[0];
                        var matrix_browser_version =
                            browser_items[1] != 'na' ? browser_items[1] : '';

                        // Browser found.
                        if (BrowserTest.br_type == matrix_browser) {
                            // Brower version check.
                            if (
                                checkVersion(
                                    BrowserTest.browser_version,
                                    matrix_browser_version,
                                )
                            ) {
                                BrowserTest.browser_okay = true;
                            } else if (BrowserTest.browser_required) {
                                BrowserTest.browser_okay = false;
                            }
                            break;
                        }
                    }
                }

                // This is always the preferred javascript setting
                BrowserTest.javascript_okay = true;

                // Always check the SSL key size.
                var ssl_size = BrowserTest.ssl_key_size;
                // Shortcircuiting this to always be true.
                // SSL key size now simply displays preference value rather than checking against actual.
                // Leaving in logic to support future behavior.
                if (true || ssl_size >= BrowserTest.min_ssl_size) {
                    // Should always true.
                    BrowserTest.ssl_okay = true;
                } else {
                    BrowserTest.ssl_okay = false;
                }

                // Is this the preferred screen resolution size? if not required continue on
                if (!BrowserTest.screen_required) {
                    BrowserTest.screen_res_okay = true;
                } else {
                    // Short circuit to avoid matrix.
                    if (true || matrix_id == -1) {
                        //os isn't known, get the default
                        var matrix_width = BrowserTest.min_width;
                        var matrix_height = BrowserTest.min_height;
                    } else {
                        var matrix_width =
                            BrowserTest.pref_matrix[matrix_id][4] != ''
                                ? BrowserTest.pref_matrix[matrix_id][4]
                                : BrowserTest.min_width;
                        var matrix_height =
                            BrowserTest.pref_matrix[matrix_id][5] != ''
                                ? BrowserTest.pref_matrix[matrix_id][5]
                                : BrowserTest.min_height;
                    }

                    if (!isNumeric(matrix_width)) {
                        BrowserTest.screen_width = -1;
                        matrix_width = 0;
                    }

                    if (!isNumeric(matrix_height)) {
                        BrowserTest.screen_height = -1;
                        matrix_height = 0;
                    }

                    if (
                        BrowserTest.screen_width >= matrix_width &&
                        BrowserTest.screen_height >= matrix_height
                    ) {
                        BrowserTest.screen_res_okay = true;
                    }
                }

                // Is this the preferred adobe acrobat? if not required continue on
                if (BrowserTest.adobe_required) {
                    // Shortcircuit the matrix.
                    if (true || matrix_id == -1)
                        //os isn't known, get the default
                        var matrix_adobe = true;
                    else
                        var matrix_adobe =
                            pref_matrix[matrix_id][6] != ''
                                ? pref_matrix[matrix_id][6]
                                : true;
                    if (
                        (!BrowserTest.adobe_okay ||
                            BrowserTest.adobe_version <
                                BrowserTest.min_adobe_version) &&
                        matrix_adobe == true
                    ) {
                        BrowserTest.adobe_okay = false;
                    }
                }
            }

            // Check the browser
            var browser_display =
                BrowserTest.browser + ' ' + BrowserTest.browser_version;

            if (BrowserTest.browser == '') {
                browser_display = BrowserTest.unknown_browser;
            }

            // Check the screen resolution
            var screen_res_display =
                BrowserTest.screen_width + ' x ' + BrowserTest.screen_height;
            if (BrowserTest.screen_width < 0 && BrowserTest.screen_height < 0) {
                screen_res_display = BrowserTest.unknown_screen_res;
            }

            // Determine what text to display - default is a success flag
            if (
                browser_display == BrowserTest.unknown_browser ||
                screen_res_display == BrowserTest.unknown_screen_res
            ) {
                BrowserTest.message_display = 'unknown';
            } else if (
                (BrowserTest.browser_required && !BrowserTest.browser_okay) ||
                (BrowserTest.cookies_required && !BrowserTest.cookies_okay) ||
                (BrowserTest.ssl_required && !BrowserTest.min_ssl_size) ||
                (BrowserTest.screen_required && !BrowserTest.screen_res_okay) ||
                (BrowserTest.adobe_required && !BrowserTest.adobe_okay)
            ) {
                BrowserTest.message_display = 'failed';
            }

            var browCompat = document.getElementById('browserCompat');
            browCompat.style.display = 'block';
            BrowserTest.check.results();

            // IE 8 doesn't visually update DOM, so force.
            // Short circuiting this for now pending further browser testing.
            // TODO: Fix the specific actions which fail to repaint.
            if (true || !document.addEventListener) {
                BrowserTest.windowOpened = true;
                window.setTimeout(function () {
                    BrowserTest.check.results();
                }, 10);
            }
        },
    };
})();

/** @namespace */
var BrowserTest = BrowserTest || {};

/**
 * Get the useragent string and determine the browser, version, and OS.
 */
BrowserTest.check = (function (d) {
    var uastring = navigator.userAgent.toLowerCase();

    // Check variables.
    var os = '';
    var os_variant = '';
    var os_type = '';
    var hasadobe = false;
    var adobe_version = '';
    var screen_width = '';
    var screen_height = '';

    BrowserTest.browser_version = '';
    BrowserTest.br_type = '';

    // Preferred variables.
    BrowserTest.os_okay = false;
    BrowserTest.browser_okay = false;
    BrowserTest.cookies_okay = false;
    BrowserTest.javascript_okay = false;
    BrowserTest.ssl_okay = false;
    BrowserTest.screen_res_okay = false;
    BrowserTest.adobe_okay = false;

    /**
     * Return string's position in user agent.
     * @param string string
     */
    function checkIt(string) {
        place = uastring.toLowerCase().indexOf(string) + 1;

        // Special consideration for Internet Explorer versions which hide their identity.
        if (string == 'msie' && place == 0) {
            place = uastring.indexOf('Trident') + 1;
        }

        return place;
    }

    /**
     * Get version.
     * @param {string} string
     * @param {number} start
     * @param {boolean} [stripdots]
     * @returns {string}
     */
    function getVersion(string, start, stripdots) {
        var nums = /[a-bA-Z0-9\\.]/;
        var finished = false;
        var dots = 0;
        var i = 0;
        var charset = '';

        // IE 11 and Edge tries to hide identity.
        if (charset == '' && navigator.appName == 'Netscape') {
            var re = new RegExp('Trident.*rv:([0-9]{1,}[.0-9]{0,})');
            var result = re.exec(navigator.userAgent);
            if (result && result.length > 1) {
                charset = result[1];
            } else {
                var re = new RegExp('Edge([0-9]{1,}[.0-9]{0,})');
                result = re.exec(string);
                charset = result && result.length > 1 ? result[1] : charset;
            }
            console.log('charset', charset);
        }

        // IE 10
        if (charset == '' && uastring.indexOf('Trident/') != -1) {
            var re2 = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
            var result = re2.exec(navigator.userAgent);
            if (result && result.length > 1) {
                charset = result[1];
            }
        }

        if (charset != '') {
            return charset;
        }

        // Get all characters until a non alphanumeric or dot is reached.
        while (!finished) {
            var c = string.charAt(start + i);
            if (!nums.test(c)) {
                finished = true;
            } else {
                if (stripdots) if (c == '.') dots++;

                if (dots <= 1) charset += c;

                i++;
            }
        }

        return charset;
    }

    return {
        /**
         * Initialize BrowserTestCheck (May be called multiple times as needed).
         * @public
         */
        init: function (options) {
            document.body.className = 'browser-compat-loading';
            document.getElementById('brow-result-text').style.display = 'none';

            BrowserTest.definitions();

            d.getElementById('brow-version-error').style.display = 'none';
            d.getElementById('brow-js-error').style.display = 'none';
            d.getElementById('brow-cookies-error').style.display = 'none';
            d.getElementById('brow-ssl-error').style.display = 'none';
            d.getElementById('brow-size-error').style.display = 'none';
            d.getElementById('brow-acrobat-error').style.display = 'none';

            BrowserTest.os_okay = false;
            BrowserTest.browser_okay = false;
            BrowserTest.cookies_okay = false;
            BrowserTest.cookies3p_okay = true;
            BrowserTest.javascript_okay = false;
            BrowserTest.ssl_okay = false;
            BrowserTest.screen_res_okay = false;
            BrowserTest.adobe_okay = false;

            // Allow properties to be set via options, including test results.
            BrowserTest.setOptions(BrowserTest, options);

            // Operating System Check.
            for (var r = 0; r < BrowserTest.os_types.length; r++) {
                os_type = BrowserTest.os_types[r][0];

                if (checkIt(os_type)) {
                    os = BrowserTest.os_types[r][1];
                    break;
                }
            }

            // Check for all variants (replaces mac and win variant code).
            for (var r = 0; r < BrowserTest.os_variants.length; r++) {
                if (checkIt(BrowserTest.os_variants[r][0])) {
                    os_variant = BrowserTest.os_variants[r][0];
                    os = BrowserTest.os_variants[r][1];
                    break;
                }
            }

            // Browser Check.
            for (var r = 0; r < BrowserTest.browser_types.length; r++) {
                BrowserTest.br_type = BrowserTest.browser_types[r][0];
                BrowserTest.browser = BrowserTest.browser_types[r][1];

                // Check for a match in list.
                if (checkIt(BrowserTest.br_type)) {
                    BrowserTest.browser = BrowserTest.browser_types[r][1];
                    // S.H 04-12-2012 if browser is MSIE then check for AOL also.
                    if (BrowserTest.br_type == 'msie' && checkIt('aol')) {
                        BrowserTest.browser += ' AOL';
                    }
                    break;
                }
            }

            // Browser Version Check.
            if (BrowserTest.br_type == 'safari') {
                BrowserTest.browser_version = getVersion(
                    uastring,
                    uastring.indexOf('version/') + 8,
                    false,
                );
            } else {
                BrowserTest.browser_version = getVersion(
                    uastring,
                    uastring.indexOf(BrowserTest.br_type) +
                        BrowserTest.br_type.length +
                        1,
                    false,
                );
            }

            // Cookie Check.
            if (!BrowserTest.cookies_okay) {
                // Attempt to write a cookie.
                document.cookie = 'cookietest=avalue;path=/';

                // Attempt to read the cookie.
                var goodcookie = document.cookie.indexOf('cookietest');
                if (goodcookie >= 0) {
                    // Delete the cookie.
                    document.cookie =
                        'cookietest=avalue;path=/;expires=Mon, 31 Dec 2000 18:18:33 GMT';
                    BrowserTest.cookies_okay = true;
                } else {
                    BrowserTest.cookies_okay = false;
                }
            }

            // Sceen dimensions Check.
            screen_width = screen.width;
            screen_height = screen.height;

            if (screen_width < 0 || screen_width == '') {
                screen_width = -1;
            }

            if (screen_height < 0 || screen_height == '') {
                screen_height = -1;
            }

            BrowserTest.screen_res_okay =
                screen_width >= BrowserTest.min_width &&
                screen_height >= BrowserTest.min_height;

            // Check for the adobe plugin in the plugins and mimeTypes objects.
            // If IE, check for the plugin using vbscript.
            if (navigator.plugins && navigator.plugins.length) {
                var adobe = navigator.plugins['Adobe Acrobat'];

                if (adobe) {
                    hasadobe = true;
                    if (adobe.description) {
                        var desc = adobe.description;
                        adobe_version = desc.substr(
                            desc.indexOf('Netscape ') + 9,
                        );
                    }
                }
            }

            if (!hasadobe) {
                if (navigator.mimeTypes && navigator.mimeTypes.length) {
                    var adobe = navigator.mimeTypes['application/pdf'];
                    if (adobe && adobe.enabledPlugin) {
                        hasadobe = true;
                    }
                }
                // In IE 11, ActiveXObject is undefined, but still works!?
                if (window.ActiveXObject || true) {
                    var control = null;
                    try {
                        control = new ActiveXObject('AcroPDF.PDF');
                    } catch (e) {}

                    if (!control) {
                        try {
                            control = new ActiveXObject('PDF.PdfCtrl');
                        } catch (e) {}
                    }
                    if (!!control) {
                        hasadobe = true;
                        adobe_version = control.GetVersions().split(',');
                        adobe_version = adobe_version[0].split('=');
                        adobe_version = parseFloat(adobe_version[1]);
                    }
                }
                // Add a nice and friendly .0 onto the end of the version.
                if (adobe_version != '' && adobe_version > 0) {
                    adobe_version += '.0';
                }
                if (!hasadobe) {
                    for (key in navigator.plugins) {
                        var plugin = navigator.plugins[key];
                        if (
                            plugin.name == 'Adobe Acrobat' ||
                            plugin.name == 'Portable Document Format'
                        ) {
                            hasadobe = true;
                        }
                    }
                }
            }
            BrowserTest.adobe_okay = hasadobe;
            hasadobe = false;
            BrowserTest.prefs.init();
        },

        /**
         * Display results of browser checks.
         * @public
         */
        results: function (skipPopups) {
            // Show overlay.
            document.getElementById('browserCompat').style.display = 'block';
            d.getElementById('lightbox-content').style.display = 'block';
            BrowserTest.popUpsAllowed = !BrowserTest.check.popUpBlocked();

            // 3p cookie test can come in late.
            BrowserTest.focusRestrictionWithInPopup();
            if (BrowserTest.cookies3p_okay === false) {
                BrowserTest.cookies_okay = BrowserTest.cookies3p_okay;
                BrowserTest.message_display = BrowserTest.cookies_required
                    ? 'failed'
                    : BrowserTest.message_display;
            }

            document.body.className = 'browser-compat-loaded';

            // Allow edge and non-windows Safari to show pdf viewer
            if (
                BrowserTest.browser == 'Edge' ||
                (BrowserTest.browser.match('Safari') &&
                    parseInt(BrowserTest.browser_version, 0) > 6)
            ) {
                BrowserTest.adobe_okay = true;
            }

            var sYes = ifs.env.i18nStrings.browCompat.yes;
            var sNo = ifs.env.i18nStrings.browCompat.no;

            if (BrowserTest.popups_required && !BrowserTest.popUpsAllowed)
                BrowserTest.message_display = 'failed';
            if (BrowserTest.message_display != 'success') {
                // Ensure errors are displayed.
                var noError = true;

                if (BrowserTest.browser_required && !BrowserTest.browser_okay) {
                    var browVerId = BrowserTest.min_vers
                        ? 'brow-version-error-x'
                        : 'brow-version-error';
                    d.getElementById('brow-ver-num').innerHTML =
                        BrowserTest.min_vers;
                    d.getElementById(browVerId).style.display = 'block';
                    noError = false;
                }
                if (BrowserTest.os_required && BrowserTest.os_okay) {
                    d.getElementById('brow-os-error').style.display = 'block';
                    noError = false;
                }
                if (BrowserTest.cookies_required && !BrowserTest.cookies_okay) {
                    d.getElementById('brow-cookies-error').style.display =
                        'block';
                    noError = false;
                }
                if (BrowserTest.popups_required && !BrowserTest.popUpsAllowed) {
                    d.getElementById('brow-popup-error').style.display =
                        'block';
                    noError = false;
                }
                if (
                    BrowserTest.screen_required &&
                    !BrowserTest.screen_res_okay
                ) {
                    d.getElementById('brow-size-error').style.display = 'block';
                    noError = false;
                }
                if (BrowserTest.adobe_required && !BrowserTest.adobe_okay) {
                    d.getElementById('brow-acrobat-error').style.display =
                        'block';
                    noError = false;
                }
                if (!noError) {
                    d.getElementById('brow-result-text').innerHTML =
                        BrowserTest.false_text;
                    d.getElementById('brow-result').className =
                        'brow-result error';
                } else if (noError) {
                    // Edge bug sometimes sets this incorrectly, force if no errors.
                    BrowserTest.message_display = 'success';
                }
            }
            if (BrowserTest.message_display == 'success') {
                d.getElementById('brow-result').className =
                    'brow-result success';
                d.getElementById('brow-result-text').innerHTML =
                    BrowserTest.true_text;
            }
            d.getElementById('brow-note-text').innerHTML =
                ifs.env.i18nStrings.browCompat.test_again;
            d.getElementById('brow-version').innerHTML =
                BrowserTest.browser + ' ' + BrowserTest.browser_version;
            d.getElementById('brow-os').innerHTML = os;
            d.getElementById('brow-js').innerHTML = BrowserTest.javascript_okay
                ? sYes
                : sNo;
            d.getElementById(
                'brow-cookies',
            ).innerHTML = BrowserTest.cookies_okay ? sYes : sNo;
            d.getElementById('brow-popup').innerHTML = BrowserTest.popUpsAllowed
                ? sYes
                : sNo;
            d.getElementById('brow-ssl').innerHTML = BrowserTest.ssl_key_size;
            d.getElementById('brow-size').innerHTML =
                screen_width + 'x' + screen_height;
            d.getElementById('brow-acrobat').innerHTML = BrowserTest.adobe_okay
                ? sYes
                : sNo;

            document.getElementById('brow-result-text').style.display = 'block';
            window.setTimeout(function () {
                var uri = window.location.href;
                window.history.pushState(
                    'clear_popup',
                    document.title,
                    uri.replace(/&popup=[01]/, ''),
                );
            }, 5000);

            window.setTimeout(function () {
                window.focus();
            }, 10);
        },

        /**
         * Open a window to test if popups are enabled.
         * @public
         * @returns {Boolean}
         */
        popUpBlocked: function () {
            var popup;

            // BrowserTest.windowOpened can be set to ensure we only open a popup once.
            var match = window.location.href.match(/&popup=(0|1)/) || [];
            if (
                match.length == 0 &&
                window.history &&
                window.history.pushState
            ) {
                var uri = window.location.href;
                if (window.location.href.match(/\?/)) {
                    window.history.pushState(
                        'clear_popup',
                        document.title,
                        uri.replace('#test', '&popup=0#test'),
                    );
                } else {
                    window.history.pushState(
                        'clear_popup',
                        document.title,
                        uri.replace('#test', '?&popup=0#test'),
                    );
                }

                //recPopup('0');
                popup = window.open(
                    BrowserTest.help_location_href,
                    '_blank',
                    'width=100, height=100 status=no, ' +
                        'toolbar=no, menubar=no, location=no, addressbar=no, top=10000, left=10000, visible=false, ' +
                        'alwaysLowered=yes',
                );
                BrowserTest.windowOpened = false;
            } else {
                var match = window.location.href.match(/&popup=(0|1)/);
                if (match && match.length > 0) {
                    return !!+match[1];
                }
                return BrowserTest.popUpsAllowed;
            }

            // Make sure popup doesn't retain focus.
            try {
                popup.blur();
            } catch (e) {}

            // Try to close popup, else report that it was blocked.
            if (popup && popup.closed) {
                recPopup('1');
                return true;
            } else {
                try {
                    popup.close();
                } catch (e) {
                    recPopup('1');
                    return true;
                }
            }

            function recPopup(value) {
                var uri = window.location.href;
                window.history.pushState(
                    'popup',
                    'popup' + document.title,
                    uri.replace(/&popup=[01]/, '&popup=' + value),
                );
            }

            return false;
        },
    };
})(document);
/** @namespace */
var BrowserTest = BrowserTest || {};

// No operation.
var noop = noop || function () {};

// Prevent console.log errors in older browsers.
// var console = (window.console = window.console || {
//     log: function() {
//         noop();
//     },
// });

// Fix IE double scrollbar issue (shortcircuiting for now).
if (false && !BrowserTest.autoLoad) {
    document.body.style.overflow = 'hidden';
}

/**
 * Browser Test UI
 */
(function () {
    /**
     * Update object with override options.
     * @param {Object} obj Object to be updated.
     * @param {Object} opt Options object with override properties.
     */
    BrowserTest.setOptions = function (obj, opt) {
        for (var prop in opt) {
            if (obj.hasOwnProperty(prop)) {
                obj[prop] = opt[prop];
            }
        }
    };

    /**
     * IE8 event support.
     * @param {Node} elem Live node.
     * @param {string} evnt Event to listen for
     * @param {Object} listen Handler function
     * @param {boolean} bub Sets useCapture (prefer false).
     */
    function _addEventListener(elem, evnt, listen, bub) {
        var bubble = bub || false;
        if (!elem) return;
        if (elem.addEventListener) {
            elem.addEventListener(evnt, listen, bubble);
        } else {
            elem.attachEvent('on' + evnt, listen, bubble);
        }
    }

    /**
     * IE8 preventDefault support.
     * @param {Object} e event object
     */
    function _preventDefault(e) {
        var e = e || { preventDefault: noop };
        if (e.preventDefault) {
            e.preventDefault();
        } else {
            e.returnValue = false;
        }
    }

    BrowserTest.focusRestrictionWithInPopup = function () {
        var elements = document
            .getElementById('lightbox-content')
            .querySelectorAll('[tabindex="0"],a[href],input,button,textarea');
        var allEnableElements = [];
        var firstElement;
        for (var i = 0; i < elements.length; i++) {
            var formElement = elements[i];
            if (
                formElement &&
                formElement.getAttribute('type') != 'hidden' &&
                formElement.getAttribute('tabindex') != '-1'
            ) {
                allEnableElements.push(formElement);
            }
        }
        if (allEnableElements.length > 0) {
            firstElement = allEnableElements[0];
            setTimeout(function () {
                document
                    .getElementById('browserCompat')
                    .setAttribute('role', 'alert');
                document
                    .getElementById('browserCompat')
                    .setAttribute('aria-describedby', 'lightbox-content');
                firstElement.focus();
            }, 3000);
            firstElement.addEventListener('keydown', function (event) {
                if (event.shiftKey == true && event.keyCode == 9) {
                    event.preventDefault();
                }
            });
            var lastElement = allEnableElements[allEnableElements.length - 1];
            lastElement.addEventListener('keydown', function (event) {
                if (event.shiftKey == false && event.keyCode == 9) {
                    event.preventDefault();
                }
            });
        }
    };
    /**
     * Test browser event handler.
     * @param {Object} e event object
     */
    function testBrowser(e) {
        _preventDefault(e);
        document.body.className = 'browser-compat-loading';
        // Double scrollbar fix.
        if (!BrowserTest.autoLoad) document.body.style.overflow = 'hidden';

        // Popup check requires a reload.
        window.location.hash = '#test';
        if (!BrowserTest.autoLoad || BrowserTest.testAgain) {
            // Solves issue with window.location = <same url>.
            var reload;
            if (window.location.href.match(/&reload=[0-9\.]+/)) {
                // If we already added reload param to url, change its value.
                var href = rewriteContext();
                reload = href.replace(
                    /&reload=[0-9\.]+/,
                    '&reload=' + Math.random(),
                );
            } else {
                // Add reload parameter to url set to random number.
                window.location.search += '&reload=' + Math.random();
                reload = rewriteContext();
            }
            // Reloading URL is required for popup test.
            window.location.href = reload;
        } else if (
            BrowserTest.autoLoad &&
            !window.location.href.match(/&popup/)
        ) {
            window.location.reload();
        }
    }

    BrowserTest.limitPopups = function (result) {
        var uri = window.location.href;
        var match = uri.match(/&popup=(true|false)/);
        if (match && match.length > 0) {
            uri.replace(/&popup=(true|false)/, '&popup=' + Math.random());
        } else {
            // Add reload parameter to url set to random number.
            window.location.search += '&popup=' + Math.random();
        }
    };

    /**
     * Rewrite context of url.
     * @returns {string} url with proper context (see window.location.pathname).
     */
    function rewriteContext() {
        // In case anyone ever removes ifs.env.context or sets it to ''.
        if (!ifs.env.context) {
            throw 'A valid, nonempty ifs.env.context is required for Browser Compatibility test.';
        }
        // Build url with proper context.
        var context = ifs.env.context ? ifs.env.context : '/dbank/live/';
        if (context.substring(context.length - 1) !== '/') {
            context = context + '/';
        }

        if (window.location.href.match(/browser-compatibility/)) {
            return window.location.href;
        } else {
            context += 'app/login/consumer';
        }
        return (
            window.location.protocol +
            '//' +
            window.location.host +
            context +
            window.location.search +
            window.location.hash
        );
    }

    /**
     *  Test Again event handler, calls testBrowser (again).
     * @param {Object} e event object
     */
    function testBrowserAgain(e) {
        BrowserTest.testAgain = true;
        testBrowser(e);
    }

    /**
     * Close overlay.
     * @param {Object} e event object
     */
    function closeBrowOverlay(e) {
        _preventDefault(e);
        if (window.location.hash == '#test') {
            window.location.hash = '';
            setTimeout(function () {
                var targetElement = document.getElementById('test-browser');
                if (targetElement) {
                    targetElement.focus();
                }
            }, 300);
        }
        // Double scrollbar fix.
        document.body.style.overflow = 'auto';
        document.getElementById('browserCompat').style.display = 'none';
    }

    /**
     * Test for 3rd party cookies via iframe + postMessage. Requires second domain serving
     *   /static/html/3p_cookie_test.html in iframe (without x-frame-options header).
     * @param {Object} e event object
     */
    function test3PCookie(e) {
        if (e.data == '3rdPCookie=false') {
            window.setTimeout(function () {
                // Only call test if overlay is
                if (
                    document.getElementById('browserCompat').style.display ==
                        'block' ||
                    window.location.hash == '#test'
                ) {
                    BrowserTest.windowOpened = true;
                    BrowserTest.check.init({ cookies3p_okay: false });
                }
            }, 10);
        } else if (e.data == '3rdPCookie=true') {
            if (
                document.getElementById('browserCompat').style.display ==
                    'block' ||
                window.location.hash == '#test'
            ) {
                BrowserTest.check.init({ cookies3p_okay: true });
            }
        }
    }

    // If stand-alone, automatically test onload.
    if (BrowserTest.autoLoad == true && !window.location.href.match(/#test/)) {
        window.location.hash = '#test';
        testBrowser(window.event);
        ifs.env.i18nStrings.browCompat.browser_compatibility = 'true';
    }

    // Show/hide test links per preference setting.
    if (ifs.env.i18nStrings.browCompat.browser_compatibility == 'false') {
        return;
    }

    // Receive results from third-party cookie test iframe.
    _addEventListener(window, 'message', test3PCookie, false);

    // Escape key closes overlay
    document.onkeydown = function (e) {
        e = e || window.event || { keyCode: undefined, preventDefault: noop };
        if (e.keyCode == 27) {
            closeBrowOverlay(e);
        }
    };

    // IE 8 textContent support.
    if (
        Object.defineProperty &&
        Object.getOwnPropertyDescriptor &&
        Object.getOwnPropertyDescriptor(Element.prototype, 'textContent') &&
        !Object.getOwnPropertyDescriptor(Element.prototype, 'textContent').get
    ) {
        (function () {
            var innerText = Object.getOwnPropertyDescriptor(
                Element.prototype,
                'innerText',
            );
            Object.defineProperty(Element.prototype, 'textContent', {
                get: function () {
                    return innerText.get.call(this);
                },
                set: function (x) {
                    return innerText.set.call(this, x);
                },
            });
        })();
    }

    // Reloading page allows popup blocker test to display proper result for non-onclick popups.
    if (window.location.hash == '#test') {
        // Once page has reloaded, initialize BrowserTest.
        BrowserTest.check.init();
    }

    window.onload = function () {
        if (
            BrowserTest.autoLoad == true &&
            !window.location.href.match(/#test/)
        ) {
            testBrowser(window.event);
        }
        // Show/hide test links per preference setting.
        if (ifs.env.i18nStrings.browCompat.browser_compatibility != 'false') {
            // If links aren't there, we are in stand-alone mode.
            var displayLinks = document.getElementById('brow-compat-link-disp');
            if (displayLinks) {
                displayLinks.style.display = 'block';
            }
        }
        // Add click event to the test-browser link.
        _addEventListener(
            document.getElementById('test-browser'),
            'click',
            testBrowser,
            false,
        );

        // Add click event to close buttons which hide popup.
        _addEventListener(
            document.getElementById('close-browser-compat'),
            'click',
            closeBrowOverlay,
            false,
        );
        _addEventListener(
            document.getElementById('brow-close-btn'),
            'click',
            closeBrowOverlay,
            false,
        );

        // Add click event to test-again button and reinitialize check obj.
        _addEventListener(
            document.getElementById('brow-again-btn'),
            'click',
            testBrowserAgain,
            false,
        );
    };
})();
